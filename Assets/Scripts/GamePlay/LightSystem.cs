using UnityEngine;

public class LightSystem : MonoBehaviour
{
    public RenderTexture[] rTexture;   // 확인할 RenderTexture
    private Texture2D tex2D;
    private bool isExposedToLight = false;
    private int textureSize;
    public float lightThreshold = 0.48f;

    // 체력 시스템
    public HealthSystem healthSystem;
    public float damagePerSecond = 10f;

    void Start()
    {
        // 텍스쳐 하나 가져와서 사이즈 저장
        textureSize = rTexture[0].width;

        tex2D = new Texture2D(textureSize, textureSize, TextureFormat.RGB24, false);

        healthSystem = GetComponent<HealthSystem>();
    }

    // RenderTexture에서 한 번이라도 완전 흰색 픽셀이 발견되면 true 반환
    private bool CheckWhitePixel()
    {
        foreach (RenderTexture cTexture in rTexture)
        {
            RenderTexture.active = cTexture;
            tex2D.ReadPixels(new Rect(0, 0, textureSize, textureSize), 0, 0);
            tex2D.Apply();
            RenderTexture.active = null;

            Color[] pixels = tex2D.GetPixels();
            for (int i = 0; i < pixels.Length; i++)
            {
                if (pixels[i].r >= lightThreshold && pixels[i].g >= lightThreshold && pixels[i].b >= lightThreshold) // 완전 흰색
                {
                    return true; // 하나라도 발견 시 즉시 true 반환
                }
            }
        }

        return false;
    }


    private bool wasExposedToLight = false;  // 이전 프레임 노출 상태

    public GameObject headParticle;


    // 햇빛 들어갈 때 켜졌다가 이 시간 후 자동으로 꺼짐
    public float particleShowSeconds = 2f;

    void Update()
    {
        // 현재 햇빛 노출 판정
        isExposedToLight = CheckWhitePixel();

        // 지속 데미지(노출 중에만)
        if (isExposedToLight && healthSystem != null)
            healthSystem.ApplyDamage(damagePerSecond * Time.deltaTime);

        // 상태 전이 감지
        if (isExposedToLight && !wasExposedToLight)
        {
            // 햇빛에 처음 들어옴
            Debug.Log("빛에 노출 시작!");
            SoundManager.Instance.StartLoopSFX(SoundId.longSizzle);

            if (headParticle != null)
            {
                headParticle.SetActive(true);
                CancelInvoke(nameof(DisableHeadParticle));
                Invoke(nameof(DisableHeadParticle), particleShowSeconds);
            }
        }
        else if (!isExposedToLight && wasExposedToLight)
        {
            // 그림자에 처음 들어옴
            Debug.Log("빛 노출 종료!");
            SoundManager.Instance.StopLoopSFX();

            if (headParticle != null)
            {
                CancelInvoke(nameof(DisableHeadParticle));
                headParticle.SetActive(false);
            }
        }

        // 상태 갱신
        wasExposedToLight = isExposedToLight;
    }

    void DisableHeadParticle()
    {
        if (headParticle != null)
            headParticle.SetActive(false);
    }


}
